usethis::use_test("test_heron")
2+2+2
usethis::use_test("demi_perimetre")
test_that("Half perimeter test function", {
expect_equal(demi_perimeter(2,2,2),3)
})
library(testthat)
test_that("Half perimeter test function", {
expect_equal(demi_perimeter(2,2,2),3)
})
test_that("Half perimeter test function", {
expect_equal(demi_perimetre(2,2,2),3)
})
demi_perimetre = function(a,b,c){
p = (a + b + c) /2
return(p)
}
test_that("Half perimeter test function", {
expect_equal(demi_perimetre(2,2,2),3)
})
test_that("Half perimeter test function", {
expect_equal(demi_perimetre(2,2,2),3),
expect_equal(demi_perimetre(3,3,3),4.5)
})
test_that("Half perimeter test function", {
expect_equal(demi_perimetre(2,2,2),3)
expect_equal(demi_perimetre(3,3,3),4.5)
})
sqrt(3)
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), sqrt(3))
})
@examples heron2(2,2,2)
#' @param a a positive float
#' @param b a positive float
#' @param c a positive float
#'
#' @return area of a triangle
#' @export
#'
#' @examples heron2(3,3,3)
#' @examples heron2(2,2,2)
#'
heron2 = function(a,b,c){
param = c(a,b,c)
if(any(!is.numeric(param) | param < 0)) { stop("one parameter or more is not numeric or isn't positive ")}
if(any(param = 0)){warning ("one of parameters is zero ")}
p = demi_perimetre(a,b,c)
aire = sqrt(p * (p-a)*(p-b)*(p-c))
return(aire)
}
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), sqrt(3))
})
expect_equal(heron2(2,2,2), 1.732051)
sqrt(3)
demi_perimetre(2,2,2)
sqrt(3 * (3-2) * (3-2) * (3-2))
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
})
test_that("Heron's test function", {
#  expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
})
test_that("Heron's test function", {
#  expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron(2,0,0))
})
expect_warning(heron(2,0,1))
test_that("Heron's test function", {
#  expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(2,0,1))
})
#' @param a a positive float
#' @param b a positive float
#' @param c a positive float
#'
#' @return area of a triangle
#' @export
#'
#' @examples heron2(3,3,3)
#' @examples heron2(2,2,2)
#'
heron2 = function(a,b,c){
param = c(a,b,c)
if(any(!is.numeric(param) | param < 0)) { stop("one parameter or more is not numeric or isn't positive ")}
if(any(param == 0)){warning ("one of parameters is zero ")}
p = demi_perimetre(a,b,c)
aire = sqrt(p * (p-a)*(p-b)*(p-c))
return(aire)
}
test_that("Heron's test function", {
#  expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(2,0,1))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(2,0,1))
})
expect_warning(heron2(2,1,1))
expect_warning(heron2(0,1,1))
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,1,1))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(1,1,0))
})
expect_warning(heron2(1,0,0))
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(1,0,0))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(1,3,0))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(1,0,3))
})
#' A Leveled-up function calculating Heron's formula
#'
#' @param a a positive float
#' @param b a positive float
#' @param c a positive float
#'
#' @return area of a triangle
#' @export
#'
#' @examples heron2(3,3,3)
#' @examples heron2(2,2,2)
#'
heron2 = function(a,b,c){
param = c(a,b,c)
if(any(!is.numeric(param) | param < 0)) { stop("one parameter or more is not numeric or isn't positive ")}
if(any(param == 0)){warning ("one of parameters is zero ")}
p = demi_perimetre(a,b,c)
aire = sqrt(p * (p-a)*(p-b)*(p-c))
return(aire)
}
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(1,0,3))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,0,3))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,3,3))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,3,3))
expect_warning(heron2(3,0,3))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,3,3))
expect_warning(heron2(3,0,3))
expect_warning(heron2(3,3,0))
})
test_that("Heron's test function", {
expect_equal(heron2(2,2,2), 1.7320508)
expect_error(heron2(-3,3,3))
expect_warning(heron2(0,3,3))
expect_warning(heron2(3,0,3))
expect_warning(heron2(3,3,0))
expect_warning(heron2(0,0,3))
})
devtools::load_all()
devtools::document()
?heron
?heron2
devtools::document()
devtools::load_all()
rm(list = c("heron2"))
devtools::load_all()
devtools::document()
devtools::install()
devtools::load_all()
devtools::document()
?heron2
